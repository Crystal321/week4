2
1
my_sqrt
my_div<-z/my_sqrt
my_div
z* c(1, 2, 3, 4) + c(0,10)
c(1, 2, 3, 4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my
my_div
getwd()
ls()
x <-9
ls()
list.files()
?list.files
args ()
args() list.files()
args ()
args (list.files)
getwd()
old.dir <-getwd()
dir.create(testdir)
dir.create (testdir)
dir.create () testdir
dir.create ()
dir.create () /Users/chenthilramasamy/testdir
?
help
dir.create()
dir.create() path
dir.create() path testdir
dir.create(file.path("testdir")
exit
quit
info()
quit
exit
bye
info()
nxt()
exit
swirl()
library(swirl)
install_from_swirl("R Programming")
swirl()
file.exists()
2
file.exists("mytest.R")
file.info("mytest.R")
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
1
swirl()
a == b
TRUE == TRUE
(FALE == TRUE) == FALSE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10<=10
5 != 7
5 !TRUE = 7
5 !TRUE 7
!5==7
FALSE&FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE,#
| FALSE)
TRUE && c(TRUE, FALSE, FALSE
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints > 7)
any(ints < 0)
all(ints > 0)
swirl()
Sys.Date()
mean(c(2, 4, 5))
swirl()
submit()
boring_function('My first function!')
boring_function
submit()
swirl()
1
swirl()
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
swirl
swirl()
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x) {x[1]}, c(8,4,0))
evaluate(function(x) {x[length(3)]}, c(8,4,0))
"I" %p% "love" %p% "R!"
submit()
evaluate(function(x) {x[length(3)]}, c(8,4,0))
evaluate(function(x) {x[length(3)]}
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]}, dat=c(8,4,0))
?paste
paste("Programming", "is", "fun!")
telegram()
submit()
telegram()
submit()
telegram(c("Hello", "world", ",", "how", "are", "we", "today", "?"))#
[1] "START Hello STOP" "START world STOP" "START , STOP"     "START how STOP"  #
[5] "START are STOP"   "START we STOP"    "START today STOP" "START ? STOP"
submit()
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
submit()
mad_libs(place='New Zealand', adjective='beautiful', noun='landscape')
submit()
"I" %p% "love" %p% "R!"
submit()
paste(left,right)
submit()
swirl()
submit()
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class()
class(sys.date())
class(d1)
unclass(d1)
d1
d2
d2<-as.Date("1969-01-01")
d2 <- as.Date("1969-01-01")
'd2 <- as.Date("1969-01-01")')
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
d1
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
swirl()
install.packages("swirl")
library(swirl)
swirl()
head(Flags)
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
l
class(cls_list)
as.character(cls_list)
?sapply
sapply()
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flas_colors)
head(flags_colors)
head(flag_colors)
lapply(flas_colors, sum)
lapply(flag_colors, sum)
sapply(flag_colors)
sapply()
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes<-flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class()
class(shape_mat)
unique(c(3,4,5,555,6,6))
unique(c(3, 4, 5, 5, 5, 555, 6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unque_vals <- lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem elem[2]))
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$animate, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$animtae, flags$landmass, mean)
ok()
tapply(flags$animate, flags$landmass, summary)
info()
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$popultion, flags$landmass, summary)
tapply(flags$population, flags$landmass, summary)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
best("SC", "heart attack")
getwd()
setwd(/Users/chenthilramasamy/Coursera/week4)
setwd("/Users/chenthilramasamy/Coursera/week4/")
best("SC", "heart attack")
outcome <-read.csv("outcome-of-care-measures.csv, colClasses = "character")
outcome <-read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
getwd()
